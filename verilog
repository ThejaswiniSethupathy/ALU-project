module alu(
input [2:0]a,b,
input [3:0]sel,
output reg [3:0]a_result,
output reg l_result,
output reg overflow
    );
	 always@(*) begin
	 //default values
	 a_result = 4'b0000;
    l_result = 0;
	 overflow = 0;
	 case(sel)
	 //arithmetic operation
	 4'b0000 : a_result = a + b;
	 4'b0001 : a_result = a - b;
	 4'b0010 : a_result = a * b;
	 4'b0011: begin 
       if (b == 3'b000) begin   //division by 0
         a_result = 4'b1111; 
       end 
		 else begin
         a_result = a / b;
       end
    end
	 4'b0100: begin 
       if (b == 3'b000) begin   //modulo when b is 0
         a_result = 4'b1111; 
       end 
		 else begin
         a_result = a % b;
       end
    end
	 //bitwise logical operation
	 4'b0101 : a_result = a & b;
	 4'b0110 : a_result = a | b;
	 4'b0111 : a_result = a ^ b;
	 4'b1000 : a_result = ~a;
	 4'b1001 : a_result = ~(a & b);
	 //logical operation
	 4'b1010 : l_result = a && b;
	 4'b1011 : l_result = a || b;
	 4'b1100 : l_result = !a[0]; 
	 //reduction operator
	 4'b1101 : l_result = &a; 
	 4'b1110 : l_result = |a;  
	 4'b1111 : l_result = ^a;
	 //default cases
	 default:begin
	 a_result = 4'b0;
	 l_result = 0;
	 end
    endcase 
end
endmodule
